[project]
name = "casting-workspace"
version = "0.0.1"
description = "Workspace root for Casting monorepo"
dependencies = []

# Do not install the root into the venv.
[tool.uv]
package = false
default-groups = ["dev"]

[tool.uv.workspace]
# Include general libs and apps; *exclude* orgs
members = [
    "llmgine",
    "apps/*"
]
exclude = [
    "orgs/*",
    "apps/identity",
    "apps/cast",
    "libs/brain",
    "libs/brain/*",
    "libs/cast",
    "libs/discord"
    ]

# Workspace-wide mapping: when a member depends on these names,
# satisfy them from the workspace (editable).
[tool.uv.sources]
llmgine = { workspace = true }
casting-core = { workspace = true }
casting-discord-framework = { workspace = true }
casting-discord-processing = { workspace = true }
casting-notion = { workspace = true }
casting-obsidian = { workspace = true }
casting-gcal = { workspace = true }
cast-core = { workspace = true }
cast-sync = { workspace = true }
cast-query = { workspace = true}
cast-git = { workspace = true }
cast-server = { workspace = true }
cast-discord = { workspace = true }
cast-cli = { workspace = true }
cast-tui = { workspace = true }
casting-identity = { workspace = true }
identity-app = { workspace = true }

[dependency-groups]
cast-query = [
    "chromadb>=1.1.0",
    "litellm>=1.77.4",
]
dev = [
  "pytest>=8.3.0",
  "pytest-asyncio>=0.23",
  "ruff>=0.8.0",
  "pyright>=1.1.390",
  "mypy>=1.10",
  "types-requests",
  "httpx>=0.27",
  "poethepoet>=0.31.0",
  "ruamel.yaml>=0.18.0",
  "typer>=0.12.0",
  "cast-cli",
  "cast-tui",
]

[tool.ruff]
target-version = "py313"
line-length = 120
src = ["apps", "libs", "tests", "orgs", "docs"]

[tool.ruff.lint]
select = [
    "A",
    "E",
    "F",
    "I",
    "N",
    "T100",
]

[tool.ruff.lint.isort]
known-first-party = ["casting", "casting_org"]

[tool.pyright]
include = [
    "apps",
    "libs",
    "llmgine",
    "tests"
]
exclude = [
    "**/__pycache__",
    "**/.venv",
    "**/node_modules",
    "orgs"
]
venvPath = "."
venv = ".venv"
pythonVersion = "3.13"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingImports = "warning"
reportMissingTypeStubs = false

[tool.pytest.ini_options]
addopts = "--doctest-modules"

[tool.poe.tasks]
fmt = "ruff format"
lint = "ruff check --fix"
check = "pyright"

# Test commands - run from root
"test:cli" = "pytest apps/cast/cli/tests"
"test:tui" = { shell = "cd apps/cast/tui && pytest $@" }
"test:core" = { shell = "cd libs/cast/core && pytest $@" }
"test:sync" = { shell = "cd libs/cast/sync && pytest $@" }
"test:all" = [
    { ref = "test:cli" },
    { ref = "test:tui" },
    { ref = "test:core" },
    { ref = "test:sync" }
]
test = { ref = "test:all" }

all = [
    { ref = "fmt" },
    { ref = "lint" },
    { ref = "check" },
    { ref = "test" },
]

# CI commands
"ci:fmt" = "ruff format --check"
"ci:lint" = "ruff check"
"ci:check" = "pyright"
"ci:test" = { ref = "test:all" }
"ci:all" = [
    { ref = "ci:fmt" },
    { ref = "ci:lint" },
    { ref = "ci:check" },
    { ref = "ci:test" },
]
